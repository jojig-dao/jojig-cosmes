// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file dymensionxyz/dymension/txfees/v1beta1/events.proto (package dymensionxyz.dymension.txfees.v1beta1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message dymensionxyz.dymension.txfees.v1beta1.EventChargeFee
 */
export class EventChargeFee extends Message<EventChargeFee> {
  /**
   * @generated from field: string payer = 1;
   */
  payer = "";

  /**
   * @generated from field: string taker_fee = 2;
   */
  takerFee = "";

  /**
   * Beneficiary is the address that will receive the fee. Optional: may be empty.
   *
   * @generated from field: string beneficiary = 3;
   */
  beneficiary = "";

  /**
   * @generated from field: string beneficiary_revenue = 4;
   */
  beneficiaryRevenue = "";

  constructor(data?: PartialMessage<EventChargeFee>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "dymensionxyz.dymension.txfees.v1beta1.EventChargeFee";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "payer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "taker_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "beneficiary", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "beneficiary_revenue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EventChargeFee {
    return new EventChargeFee().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EventChargeFee {
    return new EventChargeFee().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EventChargeFee {
    return new EventChargeFee().fromJsonString(jsonString, options);
  }

  static equals(a: EventChargeFee | PlainMessage<EventChargeFee> | undefined, b: EventChargeFee | PlainMessage<EventChargeFee> | undefined): boolean {
    return proto3.util.equals(EventChargeFee, a, b);
  }
}

